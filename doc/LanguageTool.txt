*LanguageTool.txt*  A grammar checker in Vim for English, French, German, etc. *LanguageTool*

Author:      Thomas Vigouroux <tomvig38@gmail.com>
Last Change: 2019 Sep 03

For Vim version 8.0 and above

============================================================================
Table of contents

1.  Overview                                      |languagetool-overview|
2.  Screenshots & Demo                            |languagetool-screenshots|
3.  Download                                      |languagetool-download|
4.  Installation                                  |languagetool-installation|
5.  Configuration                                 |languagetool-configuration|
6.  Features                                      |languagetool-features|
7.  Bugs                                          |languagetool-bugs|
8.  License                                       |languagetool-license|

============================================================================

1. Overview
                                                       *languagetool-overview*

This plugin integrates LanguageTool into Vim. LanguageTool is an Open Source
style and grammar checker for English, French, German, etc. See
http://www.languagetool.org/languages/ for a complete list of supported
languages.

LanguageTool detects grammar mistakes that a spelling checker cannot detect
such as "it work" instead of "it works". Since version 1.8, LanguageTool
can also detect spelling mistakes using Hunspell dictionaries bundled with
LanguageTool for several languages or using morfologik for other languages.
Vim builtin spelling checker can also of course be used along with
LanguageTool. One advantage of the spelling checker of LanguageTool over
Vim spelling checker, is that it uses the native Hunspell dictionary directly,
so it works even with the latest Hunspell dictionaries containing features
not supported by Vim. For example, the latest French Hunspell dictionaries
from http://www.dicollecte.org are not supported by Vim, but they work well
with LanguageTool. On the other hand, the Vim native spelling checker is
faster and better integrated with Vim.

See http://www.languagetool.org/ for more information about LanguageTool.

Warning: This plugin requieres `curl` to work.

============================================================================

2. Screenshots
                                                    *languagetool-screenshots*

If you don't have time to read help files, these screenshots will give you
an idea of what the LanguageTool plugin does:

  http://dominique.pelle.free.fr/pic/LanguageToolVimPlugin_en.png
  http://dominique.pelle.free.fr/pic/LanguageToolVimPlugin_fr.png

============================================================================

3. Download
                                                       *languagetool-download*

You can download the latest version of this plugin from:

  http://www.vim.org/scripts/script.php?script_id=3223

LanguageTool can be downloaded from:

  http://www.languagetool.org/

============================================================================

4. Installation
                                                   *languagetool-installation*

4.1 Installing the plugin~

Unzip file LanguageTool.zip plugin from in your personal |vimfiles| directory
(~/.vim under Unix or %HOMEPATH%\vimfiles under Windows): >

  $ mkdir ~/.vim
  $ cd ~/.vim
  $ unzip /path-to/LanguageTool.zip
  $ vim -c 'helptags ~/.vim/doc'

The zip file contains the following files: >

  plugin/LanguageTool.vim
  doc/LanguageTool.vim

You have to enable plugins by adding these two lines in your |.vimrc| file: >

  set nocompatible
  filetype plugin on

Alternatively, if you prefer to use Vundle or Pathogen plugin managers,
the plugin is available on github at:

  https://github.com/dpelle/vim-LanguageTool

For example, using Vundle, you can install the plugin by adding
this line in you ~/.vimrc: >

  Plugin 'dpelle/vim-LanguageTool'

4.2 Installing LanguageTool~

To use this plugin, you need to install the Java LanguageTool program. You
can choose to:

* download standalone version of LanguageTool (LanguageTool-*.zip) from:
  http://www.languagetool.org/ using the orange button labeled
  "Download LanguageTool for standalone use". The standalone version of
  Vim not only does grammar checking but also contains Hunspell dictionaries
  for spell checking.
* or download a nightly build LanguageTool-.*-snapshot.zip from
  http://www.languagetool.org/download/snapshots/. It contains a more
  recent version than the stable version but it is not as well tested.
* or checkout and build the latest LanguageTool from sources in git.

Recent versions of LanguageTool require Java-8.

4.2.1 Download the standalone version of LanguageTool~

Download the standalone version of LanguageTool (LanguageTool-*.zip)
from http://www.languagetool.org/, click on "LanguageTool standalone
for your desktop" to download it. Unzip it: >

  $ unzip LanguageTool-3.6.zip

This should extract the file LanguageTool-3.6/languagetool-commandline.jar
among several other files.

4.2.2 Build LanguageTool from sources in git~

If you prefer to build LanguageTool yourself from sources, you first need
to install the pre-requisite packages. On Ubuntu, you need to install the
following packages: >

  $ sudo apt-get install openjdk-8-jdk maven git

LanguageTool can then be downloaded and built with Maven as follows: >

  $ git clone https://github.com/languagetool-org/languagetool.git
  $ cd languagetool
  $ mvn clean package

After the build, the command line version of LanguageTool can be found in: >

  ./languagetool-standalone/target/LanguageTool-4.3-SNAPSHOT/LanguageTool-4.3-SNAPSHOT/languagetool-server.jar

4.3 Configuring the location of the jar file~

After installing LanguageTool, you must specify the location of the file
languagetool-server.jar in your $HOME/.vimrc file. Example: >

  let g:languagetool_server='$HOME/languagetool/languagetool-standalone/target/LanguageTool-4.3-SNAPSHOT/LanguageTool-4.3-SNAPSHOT/languagetool-server.jar'

See section |languagetool-configuration| for more optional settings.

============================================================================

5. Configuration
                                                  *languagetool-configuration*

LanguageTool plugin uses character encoding from the 'fenc' option or from
the 'enc' option if 'fenc' is empty.

Several global variables can be set in your |.vimrc| to configure the behavior
of the LanguageTool plugin.

5.1 Options~
                                                        *languagetool-options*

g:languagetool_server
                                                       *g:languagetool_server*

This variable specifies the location of the LanguageTool java grammar
checker server. Default is `$HOME/languagetool/languagetool-server.jar`.

Example: >

  :let g:languagetool_server='$HOME/languagetool/languagetool-standalone/target/LanguageTool-4.3-SNAPSHOT/LanguageTool-4.3-SNAPSHOT/languagetool-server.jar'

g:languagetool_port

This variable specifies the port that will be used by the server.
Default value is `8081`.

g:languagetool
                                                              *g:languagetool*

All LanguageTool configuration goes through this varaible, which is organized
as follows (all lists are comma separated):
>
    g:languagetool = {
        '.' : {
            {model1} for all filetypes
        },
        'my_filetype' : {
            {model1} for my_filetype
        }
    }

    {model1} = {
        'enabledRules' : list of enabled rules,
        'disabledRules' : list of disabled rules,
        'enabledCategories' : list of enabled categories,
        'disabledCategories' : list of disabled categories,
        'language' : the code of the language to check,
            as given by :LanguageToolSupportedLanguages
    }

<
Actually, there are more options than those found here, you can found an
exhaustive list here :
https://languagetool.org/http-api/swagger-ui/#!/default/post_check

Note: |g:languagetool| keys are actually used as regex, so you can take this
in account to configure languagetool for a group of filetypes.
To match for a filetype only, use its full name, if it can submatch something,
add '^' at the start and '$' at the end of the key.

g:languagetool_summary_flags
g:languagetool_preview_flags
                                                *g:languagetool_summary_flags*
                                                *g:languagetool_preview_flags*

This variable is used to configure how errors are displayed in the
summary/preview window. You can configure this using flags as described below.
These varaibles are composed of characters that will be interpreted to
configure how summaries will be printed, the syntax for a flag is :
>
    FLAG{MODIFIERS}
<
FLAG is mandatory, but MODIFIERS are optionnal (except for the `E` flag).

Available flags are :
    `T` : This flag controls whether error title has to be printed or not
        Modifiers :
        `s` : for a short title
        `f` : for a full error title (this is default)

    `M` : This flag is to control the error message
        Modifiers : See `T` flag but replace "title" by "message"

    `c` : To control error context

    `C` : To control corrections

    `E` : To control extra informations, it is not printed if no modifier is
        provided.
        Modifiers:
        `i` : Error's category id
        `r` : Error's rule id
        `R` : Subrule id
        `u` : URLs associated with the error

Default for both variable is "" which will be interpeted as
`T{f}M{f}cCE{irRu}` (everything). In this variable the order of the flags
doesn't matter, as long as modifiers come right after their flag.

5.2 Colors~
                                                         *languagetool-colors*

                         *LanguageToolErrorCount*
                         *LanguageToolGrammarError*   *LanguageToolLabel*
                         *LanguageToolSpellingError*  *LanguageToolUrl*

You can also customize the following syntax highlighting groups: >

    LanguageToolErrorCount
    LanguageToolLabel
    LanguageToolUrl
    LanguageToolGrammarError
    LanguageToolSpellingError

For example, to highlight grammar errors in blue, and spelling errors in
red, with a curly underline in vim GUIs that support it, add this into your
colorscheme:

>
    hi LanguageToolGrammarError  guisp=blue gui=undercurl guifg=NONE guibg=NONE ctermfg=white ctermbg=blue term=underline cterm=none
    hi LanguageToolSpellingError guisp=red  gui=undercurl guifg=NONE guibg=NONE ctermfg=white ctermbg=red  term=underline cterm=none


============================================================================

6. Features
                                                       *languagetool-features*

6.1 Commands~

The LanguageTool plugin defines the following commands:
    |:LanguageToolCheck|
    |:LanguageToolClean|
    |:LanguageToolSetUp|
    |:LanguageToolErrorAtPoint|
    |:LanguageToolSupportedLanguages|
    |:LanguageToolFixAtPoint|
    |:LanguageToolSummary|

:LanguageToolSetUp
                                                          *:LanguageToolSetUp*

Use this command to run LanguageTool server. It is required to run this
command before running |:LanguageToolCheck|.

:LanguageToolCheck [language]
                                                          *:LanguageToolCheck*

Use the |:LanguageToolCheck| command to check the grammar in the current
buffer. This will highlight errors in the buffer and populate the
location-list for the window.
Before running this command you need to run |:LanguageToolSetUp|
If optionnal [language] is provided, LanguageTool.nvim will use it to check
current text.
Note: After check is done, a |LanguageToolCheckDone| user event will be
triggered.
Warning: LanguageTool don't behave well with tabs, if you encounter errors
when using |:LanguageToolCheck| consider replacing tabs by spaces.

:LanguageToolClear
                                                          *:LanguageToolClear*

Use the |:LanguageToolClear| command to clear highlighting of grammar
mistakes, close the scratch window containing the list of errors, clear
and close the location-list.

The two commands are also available from the menu in gvim: >

  Plugin -> LanguageTool -> Check
                         -> Clear

:LanguageToolErrorAtPoint

This command opens more information on the error at point in the preview
window.
When in the preview window, you use |languagetool-mappings| to navigate and
manipulate errors.

:LanguageToolSupportedLanguages
                                             *:LanguageToolSupportedLanguages*

Use this command to know which languages are supported by the server you have.

:[count]LanguageToolFixAtPoint
                                                     *:LanguageToolFixAtPoint*

This command uses [count]th suggestion to fix error at point (starting at
index 0).
Without [count] the command is the same as `:0LanguageToolFixAtPoint`.
Warning: When fixing errors, the suggestions might change line arrangement
(e.g. deleting newlines, adding character...) this will cause all errors
bellow this point to not match anymore. Rearranging the lines as they were
before fixing should solve the issue.
Note: Another solution is to fix the errors in reverse order, so that solving
errors in the beginning of the document don't affect following error.
Note: If errors still don't work as expected, rerun |:LanguageToolCheck|.

:LanguageToolSummary
                                                        *:LanguageToolSummary*

This command opens the summary window, which prints out all gramatical
mistakes in the document.
You can navigate them and see the suggestions.
In this window, you can use |languagetool-mappings| to navigate and manipulate
errors.

6.2 Events~

LanguageTool provides some events to help to customize the behavior of the
plugin :
    |LanguageToolCheckDone|
    |LanguageToolServerStarted|

Those two events are available as |User| events.
Let's say you want the summary window to open whenever a check has been done,
you can do it like this :
>
    autocommand User LanguageToolCheckDone LanguageToolSummary
<

6.3 Mappings~
                                                       *languagetool-mappings*

LanguageTool.nvim provides some mappings :

<Plug>(LanguageToolCheck)
                     *i_<Plug>(LanguageToolCheck)* *<Plug>(LanguageToolCheck)*

This mapping is available is normal and insert mode, and can be used to run a
check.

6.3.1 Summary window mappings~

When in a summary window (either full or preview), the following mappings are
provided :
    `<CR>` to jump from the error summary to the error in the buffer.
    `f` when on a correction of the current error, to use this correction to
        fix the error.
    `]]` to jump to next error.
    `[[` to jump to previous error.
    `q` to close the window.



6.4 Using the Location-list~

The |location-list| is populated when running |:LanguageToolCheck|. So you can
use location-list Vim commands such as |:lopen| to open the location-list
window, |:lne| to jump to the next error, etc.

============================================================================

7. Bugs                                                   *languagetool-bugs*

Please report bugs or suggestions to <dominique.pelle@gmail.com>.
Alternatively, you can also discuss improvements to this plugin in Wiki
by clicking on the "Vim wiki" link at the top of the script page:

  http://www.vim.org/scripts/script.php?script_id=3223

============================================================================

8. Other plugin for grammar checking

Grammalecte is another grammar checker for French.  A plugin for Vim is
available at:

  https://github.com/dpelle/vim-Grammalecte

Checking text with Grammalecte or LanguageTool can find different errors,
Installing both plugins is thus recommended.

============================================================================

9. License                                             *languagetool-license*

The VIM LICENSE applies to the LanguageTool.nvim plugin (see |copyright|
except use "LanguageTool.nvim" instead of "Vim").

LanguageTool is freely available under LGPL.

============================================================================
vim:tw=78:fo=tcq2:isk=!-~,^*,^\|,^\":ts=8:ft=help:norl:
